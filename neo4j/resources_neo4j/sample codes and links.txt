Create graph
create 	(a:node { name: "a" })-[:r]->(b:node {name : "b"})->[:r]-(c:node {name : "c"}),(d:node {name: "d"})-[:r]-(e:node {name:"e"}),(f:node { name: "f" });

Connected Components	   
MATCH (n:node) 
WITH COLLECT(n) as nodes
RETURN REDUCE(graphs = [], n in nodes | 
  case when 
    ANY (g in graphs WHERE shortestPath( (n)-[*]-(g) ) ) 
    then graphs 
    else graphs + [n]
    end )

https://www.coursera.org/learn/big-data-graph-analytics/lecture/e5XXC/hands-on-path-analytics-in-neo4j-using-cypher-part-1
http://www.remwebdevelopment.com/blog/sql/some-basic-and-useful-cypher-queries-for-neo4j-201.html
https://neo4j.com/blog/apoc-1-1-0-release-awesome-procedures-cypher/

Network Diameter
MATCH (n:node), (m:node)
WHERE n<>m
WITH n,m
MATCH p =shortestPath((n)-[*]-(m))
RETURN n.name, m.name, length(p)
ORDER BY length(p) desc limit 1