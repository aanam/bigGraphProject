//Query: Insert Amrita's test graph to Neo4j
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM 'file:///test_graph.csv' AS line
WITH DISTINCT line
MERGE (s:node { name: UPPER(line.`subject`) })
MERGE (o:node { name: UPPER(line.`object`) })
CREATE (s)-[:rel {rel_type: UPPER(line.`relationship`)}]->(o);

**********************************************************
//Query: Create the test graph in Neo4j
// Create nodes and relations
CREATE
(a:node {name:"a"})-[:r]->(b:node {name:"b"})-[:r]->(c:node {name :"c"})-[:r]->(f:node {name :"f"}),
(d:node {name:"d"})-[:r]->(e:node {name:"e"})-[:r]->(g:node {name :"g"})-[:r]->(h:node {name :"h"}),
(i:node {name:"i"})-[:r]->(j:node {name:"j"});

//Add relationships to existing nodes
MATCH (a:node {name:"a"}), (c:node {name:"c"}), (f:node {name:"f"}), (i:node {name:"i"}), (d:node {name:"d"}), (e:node {name:"e"}), (g:node {name:"g"}), (h:node {name :"h"})
CREATE (a)-[:r]->(c), (f)-[:r]->(a), (f)-[:r]->(i), (i)-[:r]->(c), (d)-[:r]->(g), (e)-[:r]->(h)

**********************************************************
//Connected Components
MATCH (n:node) 
WITH COLLECT(n) as nodes
RETURN REDUCE(graphs = [], n in nodes | 
  case when 
    ANY (g in graphs WHERE shortestPath( (n)-[*]-(g) ) ) 
    then graphs 
    else graphs + [n]
    end )

**********************************************************
//Network Diameter
MATCH (n:node), (m:node)
WHERE n<>m
WITH n,m
MATCH p =shortestPath((n)-[*]-(m))
RETURN n.name, m.name, length(p)
ORDER BY length(p) desc limit 1

**********************************************************
//Degree Centrality
MATCH (n:node)-[r:r]-(m:node)  
RETURN n.name, count(r) as DegreeScore  
ORDER BY DegreeScore desc

**********************************************************
//Betweenness Centrality
MATCH p=allShortestPaths((source:node)-[:r*]->(target:node))  
WHERE id(source) < id(target) and length(p) > 1  
UNWIND nodes(p)[1..-1] as n  
RETURN n.name, count(*) as betweenness  
ORDER BY betweenness DESC

**********************************************************
//PageRank
UNWIND range(1,10) AS round  
MATCH (n:node)  
WHERE rand() < 0.1 // 10% probability  
MATCH (n:node)-[:r*..10]->(m:node)  
SET m.rank = coalesce(m.rank,0) + 1;
